@namespace(uri="MM", prefix="DV_MM")
package DataView_MM;

/* Root Def. */
class DataElement {
	val Node[*] nodes;
	val Connector[*] links;
}

/*Main Two Components Node & Link*/
class Node{
	attr String NodeName;
	ref Connector[*] outgoing;
	ref Connector[*] incoming;
	
	val DataRepresentation dataRepresentation;
	val NodeBehavior nodeBehavior;
}
class Connector{
	
	ref Node from;
	ref Node to;
	
	val DataRepresentation dataRepresentation;
	val LinkBehavior linkBehavior;
	attr DataLinkTypes[*] dataLinkTypes;
	
}
/*
	Behaviors Def.
*/
class NodeBehavior{
	val NodeAction nodeAction;
}

class LinkBehavior{
	val LinkAction linkAction;
}
abstract class NodeAction {
	op DataRepresentation sentData();
	op DataRepresentation receiveData();
}
abstract class LinkAction {
	op Node getNext();
	op Node getPrevious();
	op void Transmit();
	attr DataLinkTypes[*] dataLinkType;
}
//////////NodeAction - Sub//////////////
class GenerateData extends NodeAction{
	
}
class CollectData extends NodeAction{
	
}
class IngestData extends NodeAction{
	
}
class ProcessData extends NodeAction{
	
}
class StoreData extends NodeAction{
	
}
class LableData extends NodeAction{
	
}
class PreprocessData extends NodeAction{
	
}
class ReceptData extends NodeAction{
	
}

//////////LinkAction - Sub//////////////
class AuthinticateData extends LinkAction{
	
}
class ValidateData extends LinkAction{
	
}
class MonitorData extends LinkAction{
	
}
class MitigateData extends LinkAction{
	
}
class SendingAlarmData extends LinkAction{
	
}


//////////////////[ Data-Representation Def. ] ///////////////////////////
class DataRepresentation
{
	ref DataFormat dataFormat;
	attr int size;
	attr String dataDescription;
	attr SensitivityLevel sensitivityLevel;
	attr DataProcessingType dataProcessingType;
	attr DataBaseModelType dataStorageType;
	ref Node source;
	ref Node destination;
	//.......
	// source & destination
	// Data -- status (encrypted, normal, encoded, ... )
	// other info.
	// 
}

abstract class DataFormat{
	
}
abstract class StructuredData extends DataFormat{
	
}
abstract class SemiStructuredData extends DataFormat{
	
}
abstract class UnStructuredData extends DataFormat{
	
}
/////////// StructuredData
/////////// StructuredData ------ Data Base ------
class RelationalDB extends StructuredData{
	attr String dbName;
	val Table[*] tables;
}

class Table {
	attr String tableName;
	val Column[*] columns;
}
class Column {
	attr String columnName;
	attr String columnType;
	attr boolean isPrimaryKey;
	attr boolean isForeignKey;
	ref Column refForginKey;
}
/////////// SemiStructuredData 
class XML extends SemiStructuredData{
	val XMLNode[*] xmlNodes;
}
class XMLNode{
	
	attr String content;
	val XMLNode[*] elements;
	val NodeAttribute[*] nodeAttributes;
}

class NodeAttribute
{
	attr String attribute_Name;
	attr String attribute_Value;
}

class JSON extends SemiStructuredData{
	
}
class CSV extends SemiStructuredData{
	
}
class Excel extends SemiStructuredData{
	
}
class HTML extends SemiStructuredData{
	
}
//Resource Description Framework
class RDF extends SemiStructuredData{
	
}
//Electronic data interchange (EDI)
class EDI extends SemiStructuredData{}
//Really Simple Syndication
//class RSS extends SemiStructuredData{}
//Really Simple Syndication
//class SOAP extends SemiStructuredData{}

class SMS extends SemiStructuredData{
	attr String from;
	attr String to;
	attr String message;
}
class Email extends SemiStructuredData{
	attr String subject;
	attr String from;
	attr String to;
	attr String message;
	ref UnStructuredData[*] attachmentData;
}

////////// UnStructuredData
abstract class Multimedia extends UnStructuredData{
	attr int id_Multi;
	
	attr String size;
	attr String comment;
	attr String length;
	attr String format;
	attr String url;
}

class Audio extends Multimedia{
	
}
class Video extends Multimedia{
	
}
class Image extends Multimedia{
	attr int numberColor;
	attr boolean transparency;
	attr boolean animation;
	attr String timestamp;
	
}

class GPSData extends UnStructuredData{
	attr String latitude;
	attr String longitude;
	attr String position;
	attr String altitude;
	attr String time;
	
}

abstract class OfficeFile extends UnStructuredData{
	attr String name;
	attr String text;
	attr String font;
	attr String textsize;
	attr String color;
	attr boolean bold;
	attr boolean italics;
	attr boolean underline;
	attr String url;
	attr int size;
}

class Logs extends  OfficeFile{
	
}
class WordFile extends  OfficeFile{
	
}

class PDFFile extends  OfficeFile{
	
}
class TextFile extends  OfficeFile{
	
}



class SensorData extends UnStructuredData{
	attr String physicalsize;
	attr String measuringRange;
	attr String sensivity;
	attr String resolution;
	attr String precision;
	attr String reproducibility;
	attr String linearity;
	attr String responseTime;
	attr String Bandwidth;
	attr String hystersis;
	attr String temperatureRange;
}

/*Enums Def.*/
enum DataLinkTypes
{
	CONTINUOUS=1;
	INTERMITTENT=2;
	BATCHES=3;
	STRUCTURED=4;
	LABELLED=5;
	PREPROCESSED=6;
}
enum SensitivityLevel 
{
	High=1;
	Medium=2;
	Low=3;
}
enum DataProcessingType
{
	Batch=1;
	Real_Time=2;
}
enum DataBaseLocation
{
	
	Centralized=1;
	Distributed=2;	
	
}
enum DataBaseDesign
{
	//The purpose of multidimensional databases is to support data analysis (OLAP) addressed to decision support
	//unlike relational databases that are dedicated to daily transactions (OLTP) of an entity
	Operational_OLTP=1;	
	Analytical_OLAP=2;
	
}
enum DataBaseHosting
{	
	On_Premises=1;
	Cloud=2;	
}
enum DataBaseModelType
{
	//BI systems aim to extract and transform data from relational and other databases into data that can be presented and analyzed by decision-makers
	
	Relational=1;
	NoSQL=2;
	Multidimensional=3; // BI systems rely on data warehouses and data marts to store data under a dimensional schema
	
}
enum NoSQLStorageType
{
	Document_oriented=1;
	Column_oriented=2;
	Graphs_database=3;
	Key_value=4;
}